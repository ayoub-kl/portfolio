{"version":3,"sources":["device/index.js","hooks/useMediaQuery.js","components/theme/HomePage/styles.js","components/theme/HomePage/index.js","App.js","index.js"],"names":["large","medium","small","useMediaQuery","type","useState","targetReached","setTargetReached","updateTarget","useCallback","e","matches","useEffect","media","window","matchMedia","addListener","removeListener","Wrapper","styled","div","Sidebar","lazy","Introduction","device","fallback","size","color","loading","HomePage","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"mHACe,KACXA,MAAM,sBACNC,OAAO,sBACPC,MAAM,uB,mDCwBKC,IAzBO,SAACC,GAAU,IAAD,EACYC,oBAAS,GADrB,mBACvBC,EADuB,KACRC,EADQ,KAGxBC,EAAeC,uBAAY,SAACC,GAC5BA,EAAEC,QACJJ,GAAiB,GAEjBA,GAAiB,KAElB,IAaH,OAXAK,qBAAU,WACR,IAAMC,EAAQC,OAAOC,WAAWX,GAOhC,OANAS,EAAMG,YAAYR,GAEdK,EAAMF,SACRJ,GAAiB,GAGZ,kBAAMM,EAAMI,eAAeT,MACjC,IAEIF,I,iGCvBIY,G,YAAUC,EAAOC,IAAV,sEAAGD,CAAH,+E,8BCKdE,EAAUC,gBAAK,kBAAM,8DACrBC,EAAeD,gBAAK,kBAAK,8DAChB,aACDnB,YAAcqB,IAAOvB,QAE/B,OACI,eAACiB,EAAD,WAEC,cAAC,WAAD,CAAUO,SACP,cAAC,iBAAD,CAAgBC,KAAM,GAAIC,MAAM,UAAUC,SAAS,IADtD,SAGD,cAACP,EAAD,MAGA,cAAC,WAAD,CAAUI,SACN,cAAC,iBAAD,CAAgBC,KAAM,GAAIC,MAAM,UAAUC,SAAS,IADvD,SAGA,cAACL,EAAD,UCnBO,aAEb,OACE,cAACM,EAAD,KCFJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ac1d6caa.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nexport default {\r\n    large: `(min-width: 1080px)`,\r\n    medium: `(max-width: 1080px)`,\r\n    small: `(max-width: 650px)`,\r\n  };\r\n  ","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useCallback, useEffect } from \"react\";\r\n\r\nconst useMediaQuery = (type) => {\r\n  const [targetReached, setTargetReached] = useState(false);\r\n\r\n  const updateTarget = useCallback((e) => {\r\n    if (e.matches) {\r\n      setTargetReached(true);\r\n    } else {\r\n      setTargetReached(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(type);\r\n    media.addListener(updateTarget);\r\n\r\n    if (media.matches) {\r\n      setTargetReached(true);\r\n    }\r\n\r\n    return () => media.removeListener(updateTarget);\r\n  }, []);\r\n\r\n  return targetReached;\r\n};\r\n\r\nexport default useMediaQuery;\r\n","import styled from 'styled-components/macro'\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay : flex;\r\nposition: absolute;\r\nheight : 100vh;\r\nwidth : 83.5vw;\r\nflex-wrap : wrap;\r\n\r\n\r\n\r\n`","/* eslint-disable import/no-anonymous-default-export */\r\nimport React , {Suspense, lazy} from 'react'\r\nimport {Wrapper} from './styles.js'\r\nimport { FlapperSpinner } from 'react-spinners-kit'\r\nimport device from 'device'\r\nimport useMediaQuery from 'hooks/useMediaQuery'\r\n\r\nconst Sidebar = lazy(() => import('../Sidebar'))\r\nconst Introduction = lazy(()=> import('../Introduction'))\r\nexport default () => {\r\nlet isCheck = useMediaQuery(device.medium)\r\n\r\n    return(\r\n        <Wrapper>\r\n\r\n        {<Suspense fallback={\r\n            <FlapperSpinner size={70} color=\"#29292e\" loading={true} />\r\n        }>\r\n        <Sidebar/>  \r\n        </Suspense>\r\n    }\r\n        <Suspense fallback ={\r\n            <FlapperSpinner size={70} color=\"#29292e\" loading={true} />\r\n        }>\r\n        <Introduction/>\r\n        </Suspense>\r\n\r\n        \r\n        </Wrapper>\r\n    \r\n    \r\n    )\r\n    \r\n    }","/* eslint-disable import/no-anonymous-default-export */\nimport React from 'react'\nimport HomePage from 'components/theme/HomePage'\n\n\nexport default ()  => {\n\n  return(\n    <HomePage/>\n\n  )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}